{"version":3,"sources":["components/dataTable/useAssociationData.js","components/charts/barChart/barChart-view.js","components/charts/radarChart/radarChart-view.js","components/dataRow/dataRow-view.js","components/dataTable/dataTable-view.js","components/dataTable/dataTable-container.js","App.js","serviceWorker.js","index.js"],"names":["useAssociationData","useState","data","setData","loading","setLoading","useEffect","fetch","then","res","json","response","sort","a","b","association_score","overall","useBarChartStyles","makeStyles","root","width","BarChart","props","chartRef","useRef","title","labels","Object","keys","datasets","map","key","classes","current","myChartRef","getContext","Chart","type","label","backgroundColor","options","scales","yAxes","ticks","max","min","stepSize","layout","padding","left","right","top","bottom","className","id","ref","useRadarChartStyles","borderColor","pointBackgroundColor","scale","useRowStyles","collapsibleArea","paddingBottom","paddingTop","chartsContainer","display","justifyContent","DataRow","target","gene_info","datatypes","open","setOpen","TableRow","TableCell","IconButton","data-testid","aria-label","size","onClick","symbol","name","colSpan","Collapse","in","timeout","unmountOnExit","DataTable","TableContainer","component","Paper","Table","TableHead","TableBody","row","DataTableContainer","Backdrop","CircularProgress","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSA2BeA,EAzBY,WAAO,IAAD,EACLC,mBAAS,MADJ,mBACtBC,EADsB,KAChBC,EADgB,OAECF,oBAAS,GAFV,mBAEtBG,EAFsB,KAEbC,EAFa,KAsB7B,OAhBAC,qBAAU,WACND,GAAW,GACXE,MAJW,oCAKVC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GACF,IAAMT,EAAOS,EAAST,KAAKU,MAAK,SAACC,EAAGC,GAEhC,OAAOD,EAAEE,kBAAkBC,QAAUF,EAAEC,kBAAkBC,QAC/C,GAAK,KAEnBb,EAAQD,GACRG,GAAW,QAGhB,IAEI,CAACH,OAAME,Y,oICpBZa,EAAoBC,YAAW,CACjCC,KAAM,CACFC,MAAO,SA8DAC,EA1DE,SAAAC,GACb,IAAMC,EAAWC,mBACVtB,EAAeoB,EAAfpB,KAAMuB,EAASH,EAATG,MAEPC,EAASC,OAAOC,KAAK1B,GACrB2B,EAAWH,EAAOI,KAAI,SAAAC,GACxB,OAAO7B,EAAK6B,MAGVC,EAAUf,IAuChB,OArCAX,qBAAU,WACN,GAAGiB,EAASU,QAAQ,CAChB,IAAMC,EAAaX,EAASU,QAAQE,WAAW,MAE/C,IAAIC,IAAMF,EAAY,CAClBG,KAAM,MACNnC,KAAM,CACFwB,OAAQA,EACRG,SAAU,CAAC,CACPS,MAAOb,EACPvB,KAAM2B,EACNU,gBAAiB,aAGzBC,QAAS,CACLC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,IAAK,EACLC,IAAK,EACLC,SAAU,OAItBC,OAAQ,CACJC,QAAS,CACLC,KAAM,GACNC,MAAO,GACPC,IAAK,EACLC,OAAQ,UAM7B,CAAC7B,EAAUG,EAAQG,EAAUJ,IAG5B,yBAAK4B,UAAWrB,EAAQb,MACpB,4BACImC,GAAG,UACHC,IAAKhC,MC1DfiC,EAAsBtC,YAAW,CACnCC,KAAM,CACFC,MAAO,SA6DAC,EAzDE,SAAAC,GACb,IAAMC,EAAWC,mBACVtB,EAAeoB,EAAfpB,KAAMuB,EAASH,EAATG,MAEPC,EAASC,OAAOC,KAAK1B,GACrB2B,EAAWH,EAAOI,KAAI,SAAAC,GACxB,OAAO7B,EAAK6B,MAGVC,EAAUwB,IAsChB,OApCAlD,qBAAU,WACN,GAAGiB,EAASU,QAAQ,CAChB,IAAMC,EAAaX,EAASU,QAAQE,WAAW,MAE/C,IAAIC,IAAMF,EAAY,CAClBG,KAAM,QACNnC,KAAM,CACFwB,OAAQA,EACRG,SAAU,CAAC,CACPS,MAAOb,EACPvB,KAAM2B,EACN4B,YAAa,UACbC,qBAAsB,aAG9BlB,QAAS,CACLmB,MAAO,CACHhB,MAAO,CACHE,IAAK,EACLD,IAAK,EACLE,SAAU,KAGlBC,OAAQ,CACJC,QAAS,CACLC,KAAM,GACNC,MAAO,GACPC,IAAK,EACLC,OAAQ,UAM7B,CAAC7B,EAAUG,EAAQG,EAAUJ,IAG5B,yBAAK4B,UAAWrB,EAAQb,MACpB,4BACImC,GAAG,UACHC,IAAKhC,MCjDfqC,EAAe1C,YAAW,CAC5BC,KAAM,GACN0C,gBAAiB,CACbC,cAAe,EAAGC,WAAY,GAElCC,gBAAiB,CACbC,QAAS,OACTC,eAAgB,mBA2CTC,EAvCC,SAAA7C,GAAU,IAEfpB,EAAQoB,EAARpB,KACAkE,EAA6BlE,EAA7BkE,OAAQrD,EAAqBb,EAArBa,kBACRsD,EAAaD,EAAbC,UACAC,EAAavD,EAAbuD,UALc,EAOGrE,oBAAS,GAPZ,mBAOdsE,EAPc,KAORC,EAPQ,KAQfxC,EAAU4B,IAEhB,OACI,oCACI,kBAACa,EAAA,EAAD,CAAUpB,UAAWrB,EAAQb,MACzB,kBAACuD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,aAAaC,aAAW,aAAaC,KAAK,QAAQC,QAAS,kBAAMP,GAASD,KAC/FA,EAAO,kBAAC,IAAD,MAAsB,kBAAC,IAAD,QAGlC,kBAACG,EAAA,EAAD,KAAYL,EAAUW,QACtB,kBAACN,EAAA,EAAD,KAAYN,EAAOd,IACnB,kBAACoB,EAAA,EAAD,KAAYL,EAAUY,MACtB,kBAACP,EAAA,EAAD,KAAY3D,EAAkBC,UAElC,kBAACyD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWrB,UAAWrB,EAAQ6B,gBAAiBqB,QAAS,IACpD,kBAACC,EAAA,EAAD,CAAUC,GAAIb,EAAMc,QAAQ,OAAOC,eAAa,GAC5C,yBAAKV,cAAY,kBAAkBvB,UAAWrB,EAAQgC,iBAClD,kBAAC,EAAD,CAAU9D,KAAMoE,EAAW7C,MAAM,6BACjC,kBAAC,EAAD,CAAYvB,KAAMoE,EAAW7C,MAAM,mCCdhD8D,EA3BG,SAAAjE,GAAU,IACjBpB,EAAQoB,EAARpB,KACP,OACI,6BACE,0CACE,kBAACsF,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,CAAOd,aAAW,qBAChB,kBAACe,EAAA,EAAD,KACE,kBAACnB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,oCAGJ,kBAACmB,EAAA,EAAD,KACG3F,EAAK4B,KAAI,SAACgE,GAAD,OACN,kBAAC,EAAD,CAAS/D,IAAK+D,EAAIxC,GAAIpD,KAAM4F,YCDrCC,EArBY,SAAAzE,GAAU,IAAD,EAERtB,IAAjBE,EAFyB,EAEzBA,KAAME,EAFmB,EAEnBA,QAEb,OACI,6BACKA,GACG,kBAAC4F,EAAA,EAAD,CAAUzB,KAAMnE,GACZ,kBAAC6F,EAAA,EAAD,CAAkBC,MAAM,cAG9B9F,GAAWF,GACT,kBAAC,EAAD,CACIA,KAAMA,MCPXiG,MARf,WACE,OACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,QCKc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvG,MAAK,SAAAwG,GACjCA,EAAaC,kB","file":"static/js/main.06817d48.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst useAssociationData = () => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    const apiUrl = 'https://demo6922545.mockable.io/';\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(apiUrl)\n        .then((res) => res.json())\n        .then(response => {\n            const data = response.data.sort((a, b) => {\n                // to sort on overall association score in descending order.\n                return a.association_score.overall < b.association_score.overall\n                        ? 1 : -1;\n            });\n            setData(data);\n            setLoading(false);\n        });\n\n    }, [])\n\n    return {data, loading};\n};\n\nexport default useAssociationData;","import React, {useEffect, useRef} from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport Chart from \"chart.js\";\n\nconst useBarChartStyles = makeStyles({\n    root: {\n        width: '50%'\n    }\n});\n\nconst BarChart = props => {\n    const chartRef = useRef();\n    const {data, title} = props;\n\n    const labels = Object.keys(data);\n    const datasets = labels.map(key => {\n        return data[key];\n    });\n\n    const classes = useBarChartStyles();\n\n    useEffect(() => {\n        if(chartRef.current){\n            const myChartRef = chartRef.current.getContext(\"2d\");\n    \n            new Chart(myChartRef, {\n                type: \"bar\",\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: title,\n                        data: datasets,\n                        backgroundColor: '#2980B9',\n                    }]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                max: 1,\n                                min: 0,\n                                stepSize: 0.2\n                            }\n                        }]\n                    },\n                    layout: {\n                        padding: {\n                            left: 50,\n                            right: 50,\n                            top: 0,\n                            bottom: 0\n                        }\n                    }\n                }\n            });\n        }\n    }, [chartRef, labels, datasets, title])\n    \n    return (\n        <div className={classes.root}>\n            <canvas\n                id=\"myChart\"\n                ref={chartRef}\n            />\n        </div>\n    );\n};\n\nexport default BarChart;","import React, {useEffect, useRef} from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport Chart from \"chart.js\";\n\nconst useRadarChartStyles = makeStyles({\n    root: {\n        width: '50%'\n    }\n});\n\nconst BarChart = props => {\n    const chartRef = useRef();\n    const {data, title} = props;\n\n    const labels = Object.keys(data);\n    const datasets = labels.map(key => {\n        return data[key];\n    });\n\n    const classes = useRadarChartStyles();\n\n    useEffect(() => {\n        if(chartRef.current){\n            const myChartRef = chartRef.current.getContext(\"2d\");\n    \n            new Chart(myChartRef, {\n                type: \"radar\",\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: title,\n                        data: datasets,\n                        borderColor: '#2980B9',\n                        pointBackgroundColor: '#2980B9',\n                    }]\n                },\n                options: {\n                    scale: {\n                        ticks: {\n                            min: 0,\n                            max: 1,\n                            stepSize: .2\n                        }\n                    },\n                    layout: {\n                        padding: {\n                            left: 50,\n                            right: 50,\n                            top: 0,\n                            bottom: 0\n                        }\n                    }\n                }\n            });\n        }\n    }, [chartRef, labels, datasets, title])\n    \n    return (\n        <div className={classes.root}>\n            <canvas\n                id=\"myChart\"\n                ref={chartRef}\n            />\n        </div>\n    );\n};\n\nexport default BarChart;","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Collapse from '@material-ui/core/Collapse';\nimport AddSharpIcon from '@material-ui/icons/AddSharp';\nimport RemoveSharpIcon from '@material-ui/icons/RemoveSharp';\nimport BarChart from '../charts/barChart';\nimport RadarChart from '../charts/radarChart';\n\n\nconst useRowStyles = makeStyles({\n    root: {},\n    collapsibleArea: {\n        paddingBottom: 0, paddingTop: 0\n    },\n    chartsContainer: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n});\n\nconst DataRow = props => {\n\n    const {data} = props;\n    const {target, association_score} = data;\n    const {gene_info} = target;\n    const {datatypes} = association_score;\n\n    const [open, setOpen] = useState(false);\n    const classes = useRowStyles();\n\n    return (\n        <>\n            <TableRow className={classes.root}>\n                <TableCell>\n                  <IconButton data-testid=\"click-icon\" aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                    {open ? <RemoveSharpIcon /> : <AddSharpIcon />}\n                  </IconButton>\n                </TableCell>\n                <TableCell>{gene_info.symbol}</TableCell>\n                <TableCell>{target.id}</TableCell>\n                <TableCell>{gene_info.name}</TableCell>\n                <TableCell>{association_score.overall}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell className={classes.collapsibleArea} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <div data-testid=\"chart-container\" className={classes.chartsContainer}>\n                            <BarChart data={datatypes} title=\"Association vs Data Type\"/>\n                            <RadarChart data={datatypes} title=\"Association vs Data Type\" />\n                        </div>\n                        \n                        \n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nexport default DataRow;","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DataRow from '../dataRow';\n\nconst DataTable = props => {\n    const {data} = props;\n    return (\n        <div>\n          <h1>Data Table</h1>\n            <TableContainer component={Paper}>\n                <Table aria-label=\"collapsible table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell />\n                      <TableCell>Symbol</TableCell>\n                      <TableCell>Gene ID</TableCell>\n                      <TableCell>Gene Name</TableCell>\n                      <TableCell>Overall Association Score</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {data.map((row) => (\n                        <DataRow key={row.id} data={row} />\n                    ))}\n                  </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n};\n\nexport default DataTable;","import React from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useAssociationData from './useAssociationData';\nimport DataTable from './dataTable-view';\n\nconst DataTableContainer = props => {\n\n    const {data, loading} = useAssociationData();\n\n    return (\n        <div>\n            {loading && (\n                <Backdrop open={loading}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n            )}\n            {!loading && data && (\n                <DataTable\n                    data={data}\n                />\n            )}\n        </div>\n        \n    );\n};\n\nexport default DataTableContainer;","import React from \"react\";\nimport \"./App.css\";\nimport DataTable from './components/dataTable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DataTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}